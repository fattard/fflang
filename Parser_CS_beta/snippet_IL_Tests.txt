using func readMemory(addr: Int) -> Int;
using func writeMemory(addr: Int, data: Int) -> Int;
using func add(a: Int, b: Int) -> Int;
using func sub(a: Int, b: Int) -> Int;
using func mul(a: Int, b: Int) -> Int;
using func not(a: Int) -> Int;
using func noArgs() -> Int;


func computeFactorial(n: Int) -> Int
{
    var result: Int;
    set result = 1;

    LOOP:
        if (__bool_check(n))
        {
            set result = mul(result, n);
            set n = sub(n, 1);
            goto LOOP;
        }

    return result;
}

func main() -> Int
{
    var a: Int;
    var b: Int;
    var c: Int;
    var addr: Int;
    var value: Int;

    // Test arithmetic
    set a = 10;
    set b = 3;
    set c = add(a, b);  // c = 13

    // Memory test
    set addr = 200;
    _ = writeMemory(addr, c);
    set value = readMemory(addr);

    // Test nested conditionals
    if (__bool_check(value))
    {
        if (__bool_check(sub(value, 10)))
        {
            set a = 42;
        }
        else
        {
            set a = noArgs(); // Should set a = 7
        }
    }

    // Test function call
    set b = 5;
    set c = computeFactorial(b); // Expected c = 5! = 120

    // Write result to memory
    set addr = 300;
    _ = writeMemory(addr, c);

    return 0;
}

// Read from memory
func readMemory(addr: Int) -> Int
{
    return __builtin_int_mem_read(addr);
}

// Write to memory
func writeMemory(addr: Int, data: Int) -> Int
{
    _ = __builtin_int_mem_write(addr, data);
    return 0;
}

func add(a: Int, b: Int) -> Int
{
    return __builtin_int_add(a, b);
}

func not(a: Int) -> Int
{
    return __builtin_int_nand(a, a);
}

func sub(a: Int, b: Int) -> Int
{
    return __builtin_int_add(a, __builtin_int_add(not(b), 1));
}

// Function with no arguments
func noArgs() -> Int
{
    return 7;
}

// Multiplication using addition
func mul(a: Int, b: Int) -> Int
{
    var result: Int;
    set result = 0;

    LOOP:
        if (__bool_check(b))
        {
            set result = add(result, a);
            set b = sub(b, 1);
            goto LOOP;
        }

    return result;
}
